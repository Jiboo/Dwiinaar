import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'android-library'

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 10
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"

        testApplicationId "com.github.jiboo.dwiinaar.mupdf.tests"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }

    sourceSets.main {
        jni.srcDirs = [] //disable automatic ndk-build call
        jniLibs.srcDir 'src/main/libs'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:19.+'
    compile 'com.android.support:support-annotations:+'

    /*androidTestCompile*/ compile 'commons-io:commons-io:2.4'
}

// call regular ndk-build(.cmd) script from app directory
task ndkBuild(type: Exec) {

    def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")

    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream {
            instr -> properties.load(instr)
        }
        def sdkDir = properties.getProperty('ndk.dir')
        def ndk_build = "$sdkDir/ndk-build"

        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            ndk_build += ".cmd"
        }

        commandLine ndk_build, '-C', file('src/main').absolutePath
    }
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}